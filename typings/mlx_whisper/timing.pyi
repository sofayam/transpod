"""
This type stub file was generated by pyright.
"""

import mlx.core as mx
import numba
import numpy as np
from dataclasses import dataclass
from typing import List, TYPE_CHECKING
from .tokenizer import Tokenizer
from .model import Whisper

if TYPE_CHECKING:
    ...
def median_filter(x: np.ndarray, filter_width: int): # -> ndarray[Any, Any] | Any | ndarray[Any, dtype[float64]] | ndarray[Any, dtype[Any]]:
    """Apply a median filter of width `filter_width` along the last dimension of `x`"""
    ...

@numba.jit(nopython=True)
def backtrace(trace: np.ndarray): # -> ndarray[Any, dtype[Any]]:
    ...

@numba.jit(nopython=True, parallel=True)
def dtw_cpu(x: np.ndarray): # -> ndarray[Any, dtype[Any]]:
    ...

def dtw(x: np.ndarray) -> np.ndarray:
    ...

@dataclass
class WordTiming:
    word: str
    tokens: List[int]
    start: float
    end: float
    probability: float
    ...


def find_alignment(model: Whisper, tokenizer: Tokenizer, text_tokens: List[int], mel: mx.array, num_frames: int, *, medfilt_width: int = ..., qk_scale: float = ...) -> List[WordTiming]:
    ...

def merge_punctuations(alignment: List[WordTiming], prepended: str, appended: str): # -> None:
    ...

def add_word_timestamps(*, segments: List[dict], model: Whisper, tokenizer: Tokenizer, mel: mx.array, num_frames: int, prepend_punctuations: str = ..., append_punctuations: str = ..., last_speech_timestamp: float, **kwargs): # -> None:
    ...

