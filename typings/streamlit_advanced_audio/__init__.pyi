"""
This type stub file was generated by pyright.
"""

import base64
import io
import os
import numpy as np
import pandas as pd
import requests
import soundfile as sf
import streamlit as st
import streamlit.components.v1 as components
from dataclasses import asdict, dataclass
from datetime import timedelta
from typing import Any, Dict, Optional, Union
from streamlit import url_util

MediaData = Union[str, bytes, io.BytesIO, np.ndarray, io.FileIO]
@dataclass
class WaveSurferOptions:
    """WaveSurfer visualization options.

    All parameters are optional and will use WaveSurfer's defaults if not specified.

    Attributes:
        wave_color (str): The color of the waveform.
            (e.g., "#999", "rgb(200, 200, 200)")
        progress_color (str): The color of the progress mask.
            (e.g., "#555", "rgb(100, 100, 100)")
        height (Union[int, str]): The height of the waveform in pixels,
            or "auto" to fill container.
        bar_width (int): Width of the bars in pixels when using bar visualization.
        bar_gap (int): Gap between bars in pixels.
        bar_radius (int): Rounded borders radius for bars.
        bar_height (float): Vertical scaling factor for the waveform.
        cursor_color (str): The color of the playback cursor.
            (e.g., "#333", "rgb(50, 50, 50)")
        cursor_width (int): Width of the playback cursor in pixels.
        hide_scrollbar (bool): Whether to hide the horizontal scrollbar.
        normalize (bool): Stretch the waveform to the full height.
    """
    wave_color: str = ...
    progress_color: str = ...
    height: Union[int, str] = ...
    bar_width: int = ...
    bar_gap: int = ...
    bar_radius: int = ...
    bar_height: float = ...
    cursor_color: str = ...
    cursor_width: int = ...
    hide_scrollbar: bool = ...
    normalize: bool = ...
    def to_dict(self) -> Dict[str, Any]:
        """Convert options to a dictionary, excluding None values and converting to camelCase."""
        ...
    


_RELEASE = ...
if not _RELEASE:
    _component_func = ...
else:
    parent_dir = ...
    build_dir = ...
    _component_func = ...
def audix(data: Optional[MediaData], format: str = ..., start_time: Union[int, float, timedelta, str, None] = ..., sample_rate: Optional[int] = ..., end_time: Union[int, float, timedelta, str, None] = ..., loop: bool = ..., autoplay: bool = ..., wavesurfer_options: WaveSurferOptions = ..., key: Optional[str] = ...) -> Optional[Dict[str, Any]]:
    """Advanced audio player component. `audix` means `audio` + `extra`.

    Parameters:
    ----------
    data : Union[str, bytes, BytesIO, numpy.ndarray, file]
        Audio data, can be:
        - File path (str)
        - URL (str)
        - Raw audio data (bytes, BytesIO)
        - Numpy array (numpy.ndarray)
        - File object
    format : str
        The mime type for the audio file. Defaults to `"audio/wav"`.
        See https://tools.ietf.org/html/rfc4281 for more info.
    start_time : Union[int, float, timedelta, str, None]
        Start time of the audio, supports:
        - Number of seconds (int, float)
        - Time string (e.g., "2 minute", "20s")
        - timedelta object
    sample_rate : Optional[int]
        Sample rate when data is a numpy array.
    end_time : Union[int, float, timedelta, str, None]
        End time of the audio, format same as start_time.
    loop : bool
        Whether to loop the audio.
    autoplay : bool
        Whether to autoplay the audio.
    key : Optional[str]
        Streamlit component instance key

    Returns:
    -------
    dict or None
        Dictionary containing playback status information:
        {
            "currentTime": float,
            "selectedRegion": Optional[dict[str, float]]
        }

    Raises:
    ------
    ValueError
        If start time is greater than or equal to end time.

    Examples:
    --------
    >>> result = audix(data="path/to/audio.mp3", loop=True, autoplay=True)
    >>> print(result)
    { "currentTime": 10.0, "selectedRegion": {"start": 10.0, "end": 20.0} }
    """
    ...

