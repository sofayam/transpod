<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
    <meta name="theme-color" content="#4285F4">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <title>PWA Layout</title>
    <link rel="stylesheet" href="/css/playtranspwa.css">
</head>
<body>
    <div id="back-to-search-container" style="display: none; padding: 10px;">
        <a href="#" onclick="history.back(); return false;" style="text-decoration: none; font-size: 1.2em;">&larr; Back to Search</a>
    </div>
    <div id="title" class="title-bar"></div>
    <!-- Top button bar -->
    <div class="button-bar" id="audio-container">
        <div> <span id=podtitle2></span></div>
            <div>
        <audio id="audio" controls>
            <source src="{{mp3file}}" type="audio/mpeg">
            Your browser does not support the audio element.
        </audio>
        <div>
     <button id="back">‚¨ÜÔ∏è</button>  .............  <span id="timeDisplay">0:00 / 0:00</span> ............. <button id="top">‚è´</button>
     <p></p>
    
            <input type="range" id="seekSlider" min="0" value="0" step="0.1" disabled>
         </div>
        </div>
             <div>

            <button id="toggle-mode">üëÇ</button>
            <button id="rewind">‚è™ -5s</button>
            <button id="playpause">‚ñ∂</button>
            <button id="finished">‚úÖ</button>
            <button id="increase-font">A‚Üë</button>
            <button id="decrease-font">A‚Üì</button>
        
            </div>
  
    </div>

   
    
    <!-- Middle scrolling text area -->
    <div class="content-area" id="transcription">
  
    </div>
    
    <!-- Bottom status display -->
    <div class="status-bar">
          


                    <span id=podtitle1></span> [{{source}}] 
        <div class="status-item">
            {{#if info.published}}
            <span>Published: {{info.published}}</span>
            {{/if}}
        </div>

    </div>

    <script>
     
 const FONTMAX = 40;
        const FONTMIN = 12;


        window.onload = function () {
            window.scrollTo(0, 0);
            localStorage.setItem("lastPage", window.location.href);

        };

        function adjustPadding() {
            const audioContainer = document.getElementById("audio-container");
            const transcriptionContainer = document.getElementById("transcription");

            // Get the exact height of the fixed controls
            const audioHeight = audioContainer.offsetHeight;

            // Apply dynamic padding
            transcriptionContainer.style.paddingTop = `${audioHeight + 20}px`; // Add extra spacing for safety
        }

        // Adjust on load and resize
        window.addEventListener("load", adjustPadding);
        window.addEventListener("resize", adjustPadding);
        document.addEventListener("DOMContentLoaded", () => {

            // Show back button if coming from search
            const params = new URLSearchParams(window.location.search);
            if (params.get('from') === 'search') {
                const backButtonContainer = document.getElementById('back-to-search-container');
                if (backButtonContainer) {
                    backButtonContainer.style.display = 'block';
                }
            }


            let timeLastOpened = new Date()
            let finished = {{ meta.finished }}
        
    let pptoggle = true
    let lastTime = 0
    const listenSecondsUpdateInterval = 10; // seconds

    const decodedTitle = decodeURIComponent("{{{mp3file}}}")
        document.getElementById("podtitle1").textContent = decodedTitle
        document.getElementById("podtitle2").textContent = decodedTitle
        document.title = decodedTitle

        const audio = document.getElementById("audio");
        audio.controls = false
        let seekSlider = document.getElementById("seekSlider");
        const transcriptionContainer = document.getElementById("transcription");

        const backBtn = document.getElementById("back");
        const topBtn = document.getElementById("top");
        const playpauseBtn = document.getElementById("playpause");
        // const pauseBtn = document.getElementById("pause");
        const rewindBtn = document.getElementById("rewind");
        const increaseFontBtn = document.getElementById("increase-font");

        const decreaseFontBtn = document.getElementById("decrease-font");
        const finishBtn = document.getElementById("finished");
        const timeDisplay = document.getElementById("timeDisplay");
        const toggleModeBtn = document.getElementById("toggle-mode");

        let searchMode = false;
      
        let storedFontSize = localStorage.getItem("fontSize");""
       let parsedSize = parseInt(storedFontSize, 10);

       if (!isNaN(parsedSize) && parsedSize >= FONTMIN && parsedSize <= FONTMAX) {
           fontSize = parsedSize;
       } else {
           fontSize = 30; // Default value
       }
    
        setFontSize()

        const whisperData = {{{ transcript }}}    

        function isIphone() {
            return /iPhone/i.test(navigator.userAgent);
        }   

      

        function setFontSize() {
            if (fontSize < FONTMIN) {
                fontSize = FONTMIN
            } else if (fontSize > FONTMAX) {
                fontSize = FONTMAX
            }
             transcriptionContainer.style.fontSize = `${fontSize}px`;
             localStorage.setItem("fontSize", fontSize)
        }

        function renderTranscription(data) {
            const paragraph = document.createElement("p");
            const lang = "{{info.language}}";

            // Set direction for Arabic
            if (lang === 'ar') {
                transcriptionContainer.setAttribute("dir", "rtl");
            } else {
                transcriptionContainer.setAttribute("dir", "ltr");
            }

            data.forEach(segment => {
                const phraseSpan = document.createElement("span");
                phraseSpan.classList.add("phrase");
                phraseSpan.dataset.start = segment.start;
                phraseSpan.dataset.end = segment.end;

                let words = [];
                if (lang === 'ja') {
                    const segmenter = new Intl.Segmenter('ja', { granularity: 'word' });
                    const segmented = segmenter.segment(segment.text);
                    for (const s of segmented) {
                        words.push(s.segment);
                    }
                } else if (lang === 'ar' && typeof Intl.Segmenter === "function") {
                    const segmenter = new Intl.Segmenter('ar', { granularity: 'word' });
                    const segmented = segmenter.segment(segment.text);
                    for (const s of segmented) {
                        words.push(s.segment);
                    }
                } else {
                    words = segment.text.split(/(\s+)/);
                }

                words.forEach(word => {
                    if (word.trim().length > 0) {
                        const wordSpan = document.createElement("span");
                        wordSpan.classList.add("word");
                        wordSpan.textContent = word;
                        phraseSpan.appendChild(wordSpan);
                    } else {
                        // Preserve whitespace
                        phraseSpan.appendChild(document.createTextNode(word));
                    }
                });

                paragraph.appendChild(phraseSpan);
            });

            transcriptionContainer.appendChild(paragraph);
        }

        // Render the Whisper data
        renderTranscription(whisperData);

        // Highlight current phrase based on audio time
        const phrases = document.querySelectorAll(".phrase");
        let currentPhraseIndex = -1;

        function highlightCurrentPhrase() {
            const currentTime = audio.currentTime;

            for (let i = 0; i < phrases.length; i++) {
                const start = parseFloat(phrases[i].dataset.start);
                const end = parseFloat(phrases[i].dataset.end);

                if (currentTime >= start && currentTime < end) {
                    if (currentPhraseIndex !== i) {
                        // Remove previous highlight
                        if (currentPhraseIndex !== -1) {
                            phrases[currentPhraseIndex].classList.remove("highlight");
                        }

                        // Highlight new phrase
                        phrases[i].classList.add("highlight");
                        phrases[i].scrollIntoView({ behavior: "smooth", block: "center" });

                        currentPhraseIndex = i;
                    }
                    return;
                }
            }

            // Remove highlight if no phrase matches
            if (currentPhraseIndex !== -1) {
                phrases[currentPhraseIndex].classList.remove("highlight");
                currentPhraseIndex = -1;
            }
        }

        function onDisplayChange() {
            currentPhraseIndex = -1; // Force re-evaluation and scroll
            highlightCurrentPhrase();
        }

        // Attach the timeupdate event listener
        audio.addEventListener("timeupdate", function () {
            updateTimeDisplay();
            highlightCurrentPhrase();

        })

        transcriptionContainer.addEventListener("click", (event) => {
            if (searchMode) {
                // SEARCH MODE LOGIC
                const target = event.target;
                if (target.classList.contains("word")) {
                    const lang = "{{info.language}}";
                    let cleanWord = target.textContent.trim().replace(/[.,\/#!$%\^&\*;:{}=\-_`~()\?¬ø¬°]/g, "");
                    // convert to lowercase for consistency
                    cleanWord = cleanWord.toLowerCase();
                    if (cleanWord) {
                        const phrase = target.closest('.phrase');
                        const segmentTime = phrase ? parseFloat(phrase.dataset.start) : audio.currentTime;

                        const displayNames = new Intl.DisplayNames(['en'], { type: 'language' });

                        const langName = displayNames.of(lang);

                        let url = ""
                        if (lang == "ja") {
                            url = `https://jisho.org/search/${cleanWord}`;
                        } else {
                            // Use Wiktionary for other languages
                            url = `https://en.wiktionary.org/wiki/${cleanWord}#${langName}`;
                        }

                        const lookupData = {
                            language: lang,
                            url: url,
                            word: cleanWord,
                            podcastName: "{{pod}}",
                            episodeName: "{{mp3file}}",
                            timestamp: segmentTime,
                            lookupTime: new Date().toISOString()
                        };

                        fetch('/log-lookup', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(lookupData)
                        }).then(response => response.json()).then(data => {
                            if (data.success) {
                                console.log('Lookup logged successfully.');
                            } else {
                                console.error('Failed to log lookup:', data.message);
                            }
                        }).catch(error => {
                            console.error('Error logging lookup:', error);
                        });

                        window.open(url, '_blank');
                    }
                }
            } else {
                // LISTENING MODE LOGIC
                const phrase = event.target.closest('.phrase');
                if (phrase) {
                    const startTime = parseFloat(phrase.dataset.start);
                    audio.currentTime = startTime;
                    phrase.scrollIntoView({ behavior: "smooth", block: "center" });
                }
            }
        });

        // Update highlight when the page becomes visible
        document.addEventListener("visibilitychange", () => {
            if (document.visibilityState === "visible") {
                onDisplayChange();
            }
        });

        // Update highlight on resize or orientation change
        window.addEventListener("resize", onDisplayChange);
        window.addEventListener("orientationchange", onDisplayChange);

        // More robust handling for mobile, especially iOS
        window.addEventListener("pageshow", onDisplayChange);

        // Audio control buttons
        function setStartTime() {
            audio.currentTime = {{ startTime }};
            seekSlider.max = audio.duration;
            seekSlider.disabled = false;
        }

        seekSlider.addEventListener("input", function () {
            audio.currentTime = seekSlider.value;
            // updateHighlight();
        });

        audio.addEventListener("pause", () => {
            playpauseBtn.innerHTML = "‚ñ∂"
            pptoggle = true

        })


        audio.addEventListener("ended", () => {
            playpauseBtn.innerHTML = "‚ñ∂"
            pptoggle = true

        })
        
        audio.addEventListener("play", () => {
            playpauseBtn.innerHTML = "‚è∏"
            pptoggle = false
        })



      
  function logMessage(message) {
    console.log(message);
    transcriptionContainer.insertAdjacentHTML("afterbegin", `<p>${message}</p>`);
}
audio.addEventListener("progress", () => {
    if (audio.buffered.length > 0) {
        const end = audio.buffered.end(0);
        if (end >= audio.duration) {
    
                playpauseBtn.style.backgroundColor = "green";
            // alert("MP3 has fully downloaded.");
        }
    }
});


        audio.addEventListener("canplaythrough", setStartTime)


        function formatTime(seconds) {
            let min = Math.floor(seconds / 60);
            let sec = Math.floor(seconds % 60);
            return `${min}:${sec.toString().padStart(2, "0")}`;
        }
        function updateTimeDisplay() {
            let current = formatTime(audio.currentTime);
            let total = formatTime(audio.duration);
            seekSlider.value = audio.currentTime;
            timeDisplay.textContent = `${current} / ${total}`;
        }

        playpauseBtn.addEventListener("click", () => {
            if (pptoggle) {
                audio.play();
                playpauseBtn.innerHTML = "‚è∏"
            } else {
                saveMeta();
                playpauseBtn.innerHTML = "‚ñ∂"
                audio.pause()
            }
            pptoggle = !pptoggle;
        });

        finishBtn.addEventListener("click", () => {
            finished = true
            saveMeta(true)
        })


        backBtn.addEventListener("click", () => {
            saveMeta()
            localStorage.setItem("lastPage", "")
            window.location.href = "/pod/{{pod}}"
        });
        topBtn.addEventListener("click", () => {
            saveMeta()
            localStorage.setItem("lastPage", "")
            window.location.href = "/"
        });

        rewindBtn.addEventListener("click", () => {
            audio.currentTime = Math.max(0, audio.currentTime - 5);
        });
        // Font size controls
        increaseFontBtn.addEventListener("click", () => {
        
            fontSize += 2;
             setFontSize()
      
        });

        decreaseFontBtn.addEventListener("click", () => {
          
                fontSize -= 2;
                setFontSize()
            
        });

        toggleModeBtn.addEventListener("click", () => {
            searchMode = !searchMode;
            if (searchMode) {
                toggleModeBtn.textContent = "üîé";
                toggleModeBtn.style.backgroundColor = "lightblue";
            } else {
                toggleModeBtn.textContent = "üëÇ";
                toggleModeBtn.style.backgroundColor = "";
            }
        });

        window.onbeforeunload = function () {
            saveMeta()
        }

        setInterval(() => {
            if (! (audio.paused))
                saveMeta()
        }, 15000);

        function saveMeta(andNext = false) {
            let meta = { finished, timeLastOpened, timeInPod: audio.currentTime }
            fetch("/update-meta-ep", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ name: "{{mp3file}}", ...meta })
            })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        alert(`Error: ${data.message}`);
                    } else {
                        console.log(`Updated meta for ${name}`);
                    }
                    if (andNext) {
                        {{#if nextep}}  
                        window.location.href = "/play/{{pod}}/{{{nextep}}}"
                        {{else}}
                        window.location.href = "/pod/{{pod}}"
                        {{/if}}
                    }
                })
                .catch(error => console.error("Fetch error:", error));

        }

        function audioChanged() 
        {
            const currentTime = audio.currentTime;
            // store currentTime in persistent variable

            // Check if the audio has changed
            if (currentTime !== lastTime) {
                lastTime = currentTime; // Update the last time
                return true; // Audio has changed
            }
            return false; // Audio is not playing
        }

    // Function to call the update-time endpoint
    function addListeningTime() {
        const date = new Date().toISOString().split('T')[0]; // Get the current date in YYYY-MM-DD format
        const podcastName = "{{pod}}"; // Use the current podcast name
        const episodeName = "{{mp3file}}"; // Use the current episode name
        
        fetch(`/update-time?date=${date}&podcastName=${encodeURIComponent(podcastName)}&episodeName=${encodeURIComponent(episodeName)}&seconds=${listenSecondsUpdateInterval}`)
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    console.error(`Error updating time: ${data.message}`);
                } else {
                    console.log(`Time updated successfully for ${podcastName} - ${episodeName}`);
                }
            })
            .catch(error => console.error("Fetch error:", error));
    }

    // Call updateTime every 10 seconds while the audio is playing
    setInterval(() => {
        if (audioChanged()) {
            addListeningTime();
        }
    }, listenSecondsUpdateInterval * 1000); // Convert seconds to milliseconds

});



</script>
</body>
</html>