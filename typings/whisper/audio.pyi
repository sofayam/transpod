"""
This type stub file was generated by pyright.
"""

import numpy as np
import torch
from functools import lru_cache
from typing import Optional, Union

SAMPLE_RATE = ...
N_FFT = ...
HOP_LENGTH = ...
CHUNK_LENGTH = ...
N_SAMPLES = ...
N_FRAMES = ...
N_SAMPLES_PER_TOKEN = ...
FRAMES_PER_SECOND = ...
TOKENS_PER_SECOND = ...
def load_audio(file: str, sr: int = ...): # -> NDArray[floating[Any]]:
    """
    Open an audio file and read as mono waveform, resampling as necessary

    Parameters
    ----------
    file: str
        The audio file to open

    sr: int
        The sample rate to resample the audio if necessary

    Returns
    -------
    A NumPy array containing the audio waveform, in float32 dtype.
    """
    ...

def pad_or_trim(array, length: int = ..., *, axis: int = ...): # -> Tensor | NDArray[Any]:
    """
    Pad or trim the audio array to N_SAMPLES, as expected by the encoder.
    """
    ...

@lru_cache(maxsize=None)
def mel_filters(device, n_mels: int) -> torch.Tensor:
    """
    load the mel filterbank matrix for projecting STFT into a Mel spectrogram.
    Allows decoupling librosa dependency; saved using:

        np.savez_compressed(
            "mel_filters.npz",
            mel_80=librosa.filters.mel(sr=16000, n_fft=400, n_mels=80),
            mel_128=librosa.filters.mel(sr=16000, n_fft=400, n_mels=128),
        )
    """
    ...

def log_mel_spectrogram(audio: Union[str, np.ndarray, torch.Tensor], n_mels: int = ..., padding: int = ..., device: Optional[Union[str, torch.device]] = ...): # -> Tensor:
    """
    Compute the log-Mel spectrogram of

    Parameters
    ----------
    audio: Union[str, np.ndarray, torch.Tensor], shape = (*)
        The path to audio or either a NumPy array or Tensor containing the audio waveform in 16 kHz

    n_mels: int
        The number of Mel-frequency filters, only 80 is supported

    padding: int
        Number of zero samples to pad to the right

    device: Optional[Union[str, torch.device]]
        If given, the audio tensor is moved to this device before STFT

    Returns
    -------
    torch.Tensor, shape = (80, n_frames)
        A Tensor that contains the Mel spectrogram
    """
    ...

