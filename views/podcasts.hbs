<!DOCTYPE html>
<html lang="en">
  <head>
    <link rel="manifest" href="/manifest.json">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <style>
body {
    font-family: Arial, sans-serif;
    margin: 20px;
    padding: 0;
    background-color: #f8f8f8;
}

h1 {
    text-align: center;
    margin-bottom: 20px;
}

.container {
    display: flex;
    justify-content: center;
}

.table {
    width: 90%;
    max-width: 600px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.table-header, .table-row {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 12px;
    border-bottom: 1px solid #ddd;
    flex-wrap: nowrap; /* üöÄ Force everything to stay in one row */
    gap: 10px; /* Adds spacing between items */
}

.table-header {
    background: #007bff;
    color: white;
    font-weight: bold;
}

.col {
    flex: 1;
    min-width: 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

/* Make sure the folder name gets priority space */
.folder-name {
    flex: 2;
}

/* Ensure dropdowns shrink but stay usable */
select {
    flex: 0 1 auto; /* Allow the select boxes to shrink or grow naturally */
    min-width: 80px; /* Set a smaller minimum width */
    max-width: 120px; /* Set a smaller maximum width */
    padding: 6px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background: white;
    cursor: pointer;
}

/* Styling for the links section */
.link-container {
    text-align: center;
    margin-top: 20px;
}

/* Button-like styling for links */
.styled-link {
    display: inline-block;
    padding: 10px 15px;
    margin: 5px;
    background-color: #007bff;
    color: white;
    text-decoration: none;
    border-radius: 5px;
    font-size: 16px;
    transition: background-color 0.3s ease;
}

.styled-link:hover {
    background-color: #0056b3;
}


/* Responsive Design */
@media (max-width: 480px) {
    .table-header, .table-row {
        flex-wrap: nowrap; /* üöÄ Ensures everything stays in one row */
    }

    .folder-name {
        flex: 2; /* Allow it to take more space */
    }

    select {
        flex: 1;
        min-width: 80px;
    }

    .styled-link {
        display: block;
        width: 80%;
        margin: 5px auto;
    }
}

    </style>
  </head>
  <body>
    <h1>Choose a podcast</h1>

<div class="container">
    <div class="table">
        {{#each pods}}
        <div class="table-row">
            <div class="col folder-name"><a href="/pod/{{this.name}}">{{this.name}}</a></div>
            <div class="col">
                <select class="order" data-folder="{{this.name}}">
                    <option value="oldest" {{#if (eq this.order "oldest")}}selected{{/if}}>‚è≥‚Üì</option>
                    <option value="latest" {{#if (eq this.order "latest")}}selected{{/if}}>‚åõ‚Üë</option>
                </select>
            </div>
            <div class="col">
                <select class="show" data-folder="{{this.name}}">
                    <option value="all" {{#if (eq this.show "all")}}selected{{/if}}>üî¥+‚úÖ</option>
                    <option value="unfinished" {{#if (eq this.show "unfinished")}}selected{{/if}}>üî¥</option>
                </select>
            </div>
            <div class="col">
                <select class="coreset" data-folder="{{this.name}}">
                    <option value="false" {{#if (eq this.coreset "false")}}selected{{/if}}>All</option>
                    <option value="true" {{#if (eq this.coreset "true")}}selected{{/if}}>Core</option>
                </select>
            </div>
        </div>
        {{/each}}
    </div>

</div>
<div class="link-container">
        <select id="coreSetChoice">
        <option value="false" {{#if (eq coresetOnly "false")}}selected{{/if}}>Fire Hose</option>
        <option value="true" {{#if (eq coresetOnly "true")}}selected{{/if}}>Core set only</option>
    </select>
    <a href="/recentListen" class="styled-link">Recent listening</a>
    <a href="/recentPublish" class="styled-link">Recently Published</a>
    <a href="/chart" class="styled-link">Chart</a>
    <a href="/showGetNew" class="styled-link">Get new podcasts</a>
</div>

<script>

    window.addEventListener("load", function () {
        const lastPage = localStorage.getItem("lastPage");
        if (lastPage) {
            window.location.href = lastPage;
        }
    });
    document.addEventListener("DOMContentLoaded", function () {

        const coreSetChoice = document.getElementById("coreSetChoice");

        coreSetChoice.addEventListener("change", function () {
            const selectedValue = coreSetChoice.value;

            fetch("/update-meta-global", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ coresetOnly: selectedValue })
            })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        alert(`Error: ${data.message}`);
                    } else {
                        console.log(`Core set choice updated to: ${selectedValue}`);
                        location.reload(); // Reload the page to reflect changes
                    }
                })
                .catch(error => console.error("Fetch error:", error));
        });



    document.querySelectorAll(".table select").forEach(select => {
        select.addEventListener("change", function () {
            const name = this.getAttribute("data-folder");

            // Get latest values of both dropdowns
            const order = document.querySelector(`.order[data-folder="${name}"]`).value;
            const show = document.querySelector(`.show[data-folder="${name}"]`).value;
            const coreset = document.querySelector(`.coreset[data-folder="${name}"]`).value;

            fetch("/update-meta-pod", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ name, order, show, coreset })
            })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        alert(`Error: ${data.message}`);
                    } else {
                        console.log(`Updated meta for ${name}`);
                    }
                })
                .catch(error => console.error("Fetch error:", error));
        });
    });
});
</script>
  </body>
</html>