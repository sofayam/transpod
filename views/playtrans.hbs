<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Should not be seen</title>
    <style>
        #audio-container {
            position: fixed;
            /* Makes the container stick to the top */
            top: 0;
            /* Position it at the top of the viewport */
            left: 0;
            width: 100%;
            /* Stretch to the full width of the page */
            background-color: #fff;
            /* Optional: Add a background color for clarity */
            z-index: 1000;
            /* Keep it on top of other elements */
            padding: 10px 0;
            /* Add some padding for better spacing */
            border-bottom: 2px solid #ddd;
            text-align: center;
        }


        /* Large, easy-to-tap buttons */
        .controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            padding: 10px;
        }

        .controls button {
            font-size: 18px;
            padding: 10px 20px;
            border: none;
            background-color: #007BFF;
            color: white;
            border-radius: 10px;
            cursor: pointer;
            transition: background 0.3s;
        }

        .controls button:hover {
            background-color: #0056b3;
        }

        .controls button:active {
            transform: scale(0.95);
        }

        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
        }

        .content {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 20px;
            /* padding-top: 100px; /* Ensure the text doesn't overlap with the fixed player */
        }

        .segment {
            margin-bottom: 20px;
        }

        .highlight {
            color: red;
            background-color: white;
            transition: background-color 0.5s ease;
            /* Smooth highlight effect */
        }

        input[type="range"] {
            width: 80%;
        }
        

    </style>
</head>

<body>


    <div id="audio-container">
        <span id=podtitle></span> [{{source}}]  <button id="back">⬆️</button> <button id="top">⏫</button>
        <p>
            {{#if info.published}}
            <span>Published: {{info.published}}</span>
            {{/if}}
        </p>
        <p>
      
            <input type="range" id="seekSlider" min="0" value="0" step="0.1" disabled>
        </p>
        <audio id="audio" controls>
            <source src="{{mp3file}}" type="audio/mpeg">
            Your browser does not support the audio element.
        </audio>
        <div id="timeDisplay">0:00 / 0:00</div>

      <div class="controls">
   
            <button id="next">⏭️</button>
            <button id="rewind">⏪ -5s</button>
            <button id="playpause">▶</button>
            <button id="finished">✅</button>
            <button id="increase-font">A↑</button>
            <button id="decrease-font">A↓</button>
            </div>

    </div>

    <div class="content" id="transcription">

    </div>

    <script>

        const FONTMAX = 40;
        const FONTMIN = 12;


        window.onload = function () {
            window.scrollTo(0, 0);
            localStorage.setItem("lastPage", window.location.href);

        };

        function adjustPadding() {
            const audioContainer = document.getElementById("audio-container");
            const transcriptionContainer = document.getElementById("transcription");

            // Get the exact height of the fixed controls
            const audioHeight = audioContainer.offsetHeight;

            // Apply dynamic padding
            transcriptionContainer.style.paddingTop = `${audioHeight + 20}px`; // Add extra spacing for safety
        }

        // Adjust on load and resize
        window.addEventListener("load", adjustPadding);
        window.addEventListener("resize", adjustPadding);
        document.addEventListener("DOMContentLoaded", () => {


            let timeLastOpened = new Date()
            let finished = {{ meta.finished }}
        
    let pptoggle = true

    const decodedTitle = decodeURIComponent("{{{mp3file}}}")
        document.getElementById("podtitle").textContent = decodedTitle
        document.title = decodedTitle

        const audio = document.getElementById("audio");
        audio.controls = false
        let seekSlider = document.getElementById("seekSlider");
        const transcriptionContainer = document.getElementById("transcription");
        const nextBtn = document.getElementById("next");
        const backBtn = document.getElementById("back");
        const topBtn = document.getElementById("top");
        const playpauseBtn = document.getElementById("playpause");
        // const pauseBtn = document.getElementById("pause");
        const rewindBtn = document.getElementById("rewind");
        const increaseFontBtn = document.getElementById("increase-font");
        const decreaseFontBtn = document.getElementById("decrease-font");
        const finishBtn = document.getElementById("finished");
        const timeDisplay = document.getElementById("timeDisplay")
      
        fontSize = localStorage.getItem("fontSize") || 20;
        setFontSize()

        const whisperData = {{{ transcript }}}    

        function setFontSize() {
            if (fontSize < FONTMIN) {
                fontSize = FONTMIN
            } else if (fontSize > FONTMAX) {
                fontSize = FONTMAX
            }
             transcriptionContainer.style.fontSize = `${fontSize}px`;
             localStorage.setItem("fontSize", fontSize)
        }

        // Process the data into paragraphs and phrases
        function renderTranscription(data) {
            const paragraph = document.createElement("p");

            data.forEach(segment => {

                const span = document.createElement("span");
                span.classList.add("phrase");
                span.dataset.start = segment.start;
                span.dataset.end = segment.end;
                span.textContent = segment.text;

                span.addEventListener("click", () => {
                    const startTime = parseFloat(span.dataset.start);
                    audio.currentTime = startTime; // Jump to the segments's start time
                    // audio.play(); // Resume playback
                    span.scrollIntoView({ behavior: "smooth", block: "center" })
                })

                paragraph.appendChild(span);
            });


            transcriptionContainer.appendChild(paragraph);
        }

        // Render the Whisper data
        renderTranscription(whisperData);

        // Highlight current phrase based on audio time
        const phrases = document.querySelectorAll(".phrase");
        let currentPhraseIndex = -1;

        function highlightCurrentPhrase() {
            const currentTime = audio.currentTime;

            for (let i = 0; i < phrases.length; i++) {
                const start = parseFloat(phrases[i].dataset.start);
                const end = parseFloat(phrases[i].dataset.end);

                if (currentTime >= start && currentTime < end) {
                    if (currentPhraseIndex !== i) {
                        // Remove previous highlight
                        if (currentPhraseIndex !== -1) {
                            phrases[currentPhraseIndex].classList.remove("highlight");
                        }

                        // Highlight new phrase
                        phrases[i].classList.add("highlight");
                        phrases[i].scrollIntoView({ behavior: "smooth", block: "center" });

                        currentPhraseIndex = i;
                    }
                    return;
                }
            }

            // Remove highlight if no phrase matches
            if (currentPhraseIndex !== -1) {
                phrases[currentPhraseIndex].classList.remove("highlight");
                currentPhraseIndex = -1;
            }
        }

        // Attach the timeupdate event listener
        audio.addEventListener("timeupdate", function () {
            updateTimeDisplay();
            highlightCurrentPhrase();

        })

        // Audio control buttons
        function setStartTime() {
            audio.currentTime = {{ meta.timeInPod }}
        seekSlider.max = audio.duration;
        seekSlider.disabled = false;
    }

        seekSlider.addEventListener("input", function () {
            audio.currentTime = seekSlider.value;
            // updateHighlight();
        });

        audio.addEventListener("paused", () => {
            playpauseBtn.innerHTML = "▶"
            pptoggle = true

        })


        audio.addEventListener("ended", () => {
            playpauseBtn.innerHTML = "▶"
            pptoggle = true

        })
        
        audio.addEventListener("play", () => {
            playpauseBtn.innerHTML = "⏸"
            pptoggle = false
        })



      
  function logMessage(message) {
    console.log(message);
    transcriptionContainer.insertAdjacentHTML("afterbegin", `<p>${message}</p>`);
}
audio.addEventListener("progress", () => {
    if (audio.buffered.length > 0) {
        const end = audio.buffered.end(0);
        if (end >= audio.duration) {
    
                playpauseBtn.style.backgroundColor = "green";
            // alert("MP3 has fully downloaded.");
        }
    }
});


        audio.addEventListener("canplaythrough", setStartTime)

        nextBtn.addEventListener("click", () => {
            saveMeta(true)
        })

        function formatTime(seconds) {
            let min = Math.floor(seconds / 60);
            let sec = Math.floor(seconds % 60);
            return `${min}:${sec.toString().padStart(2, "0")}`;
        }
        function updateTimeDisplay() {
            let current = formatTime(audio.currentTime);
            let total = formatTime(audio.duration);
            seekSlider.value = audio.currentTime;
            timeDisplay.textContent = `${current} / ${total}`;
        }

        playpauseBtn.addEventListener("click", () => {
            if (pptoggle) {
                audio.play();
                playpauseBtn.innerHTML = "⏸"
            } else {
                saveMeta();
                playpauseBtn.innerHTML = "▶"
                audio.pause()
            }
            pptoggle = !pptoggle;
        });

        finishBtn.addEventListener("click", () => {
            finished = true
            saveMeta(true)
        })


        backBtn.addEventListener("click", () => {
            saveMeta()
            localStorage.setItem("lastPage", "")
            window.location.href = "/pod/{{pod}}"
        });
        topBtn.addEventListener("click", () => {
            saveMeta()
            localStorage.setItem("lastPage", "")
            window.location.href = "/"
        });

        rewindBtn.addEventListener("click", () => {
            audio.currentTime = Math.max(0, audio.currentTime - 5);
        });
        // Font size controls
        increaseFontBtn.addEventListener("click", () => {
        
            fontSize += 2;
             setFontSize()
      
        });

        decreaseFontBtn.addEventListener("click", () => {
          
                fontSize -= 2;
                setFontSize()
            
        });

        window.onbeforeunload = function () {
            saveMeta()
        }

        setInterval(() => {
            if (! (audio.paused))
                saveMeta()
        }, 15000);

        function saveMeta(andNext = false) {
            let meta = { finished, timeLastOpened, timeInPod: audio.currentTime }
            fetch("/update-meta-ep", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ name: "{{mp3file}}", ...meta })
            })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        alert(`Error: ${data.message}`);
                    } else {
                        console.log(`Updated meta for ${name}`);
                    }
                    if (andNext) {
                        window.location.href = "/play/{{pod}}/{{{nextep}}}"
                    }
                })
                .catch(error => console.error("Fetch error:", error));

        }
});
    </script>
</body>

</html>
