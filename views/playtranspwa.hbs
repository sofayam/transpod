<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
    <meta name="theme-color" content="#4285F4">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <title>PWA Layout</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        }
        
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        
        body {
            background-color: #f5f5f5;
        }

                .highlight {
            color: red;
            background-color: white;
            transition: background-color 0.5s ease;
            /* Smooth highlight effect */
        }

        
        /* Top button bar */
        .button-bar {
            flex-shrink: 0;
            padding: 12px;
            background-color: #e3badf;
            display: flex;
            flex-wrap: wrap; /* Allow wrapping if needed */
            justify-content: center; /* Center-align all content */
            align-items: center; /* Vertically center-align content */
            gap: 8px; /* Add spacing between elements */
        }

        #podtitle2 {
            flex: 1 1 100%; /* Make the title span the full width */
            text-align: center; /* Center-align the text */
            font-size: 1.2rem; /* Adjust font size for better visibility */
            font-weight: bold; /* Make the title bold */
            margin-bottom: 8px; /* Add spacing below the title */
        }

        input[type="range"] {
            width: 100%;
            padding: 12px;
        }
        
      .button-bar button {
    background-color: transparent;
    border: 1px solid white;
    color: white;
    padding: 4px 8px; /* Reduce padding for smaller buttons */
    border-radius: 3px; /* Smaller border radius */
    cursor: pointer;
    font-weight: 500;
    font-size: 0.8rem; /* Reduce font size */
    transition: background-color 0.2s;
    min-width: 50px; /* Optional: Set a minimum width for buttons */
}
        
        .button-bar button:hover {
            background-color: rgba(255,255,255,0.1);
        }
        
        /* Middle scrolling text area */
        .content-area {
            flex: 1;
            overflow-y: auto;
            padding: 16px;
            background-color: white;
            height: calc(var(--vh, 1vh) * 100 - 96px); /* Adjust for button bar and status bar */
        }
        
        .content-area p {
            margin-bottom: 16px;
            line-height: 1.5;
        }
        
        /* Bottom status display */
        .status-bar {
            flex-shrink: 0;
            padding: 12px;
            background-color: #adbb5c;
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 -2px 4px rgba(0,0,0,0.1);
            z-index: 10;
        }
        
        .status-item {
            display: flex;
            align-items: center;
            font-size: 0.85rem;
        }
        
        .status-item span {
            margin-left: 4px;
        }
        
        .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 6px;
        }
        
        .status-indicator.green {
            background-color: #4CAF50;
        }
        
        .status-indicator.yellow {
            background-color: #FFC107;
        }
        
        .status-indicator.red {
            background-color: #F44336;
        }
        
        /* Responsive Design for Different Devices */
        
        /* Mobile Phones (Small Screens) */
        @media (max-width: 600px) {
            .button-bar {
                padding: 8px;
                flex-wrap: wrap;
                justify-content: center;
                gap: 8px;
            }
            
            .button-bar button {
                padding: 6px 10px;
                font-size: 1.1rem;
                min-width: 60px;
            }
            
            .content-area {
                padding: 12px;
            }
            
            .content-area h2 {
                
                margin-bottom: 12px;
            }
            
            .content-area p {
               
                margin-bottom: 12px;
            }
            
            .status-bar {
                flex-wrap: wrap;
                justify-content: space-around;
                padding: 8px;
            }
            
            .status-item {
                margin: 4px;
                font-size: 0.75rem;
                min-width: 45%;
                text-align: center;
                justify-content: center;
            }
        }
        
        /* Tablets (Medium Screens) */
        @media (min-width: 601px) and (max-width: 1024px) {
            .button-bar {
                padding: 12px 16px;
                display: flex;
                flex-wrap: wrap; /* Allow buttons to wrap to the next line if needed */
                justify-content: space-between; /* Distribute buttons evenly */
                align-items: center; /* Center-align buttons vertically */
                gap: 8px; /* Add spacing between buttons */
            }
            
            .button-bar button {
                padding: 8px 12px; /* Adjust padding for better spacing */
                font-size: 0.9rem; /* Slightly larger font size for readability */
                min-width: 70px; /* Ensure buttons are wide enough */
                flex: 1; /* Allow buttons to grow and fill available space */
                max-width: 120px; /* Prevent buttons from becoming too wide */
            }
            
            #audio-container audio {
                width: 100%; /* Make the audio player span the full width */
                margin-bottom: 8px; /* Add spacing below the audio player */
            }
            
            #seekSlider {
                width: 100%; /* Ensure the slider spans the full width */
                margin-top: 8px; /* Add spacing above the slider */
            }
            
            .content-area {
                padding: 20px;
            }
            
            .content-area h2 {
               
                margin-bottom: 16px;
            }
            
            .status-bar {
                padding: 10px 16px;
            }
            
            .status-item {
                font-size: 0.85rem;
            }
        }
        
        /* Desktops (Large Screens) */
        @media (min-width: 1025px) {
            .button-bar {
                padding: 12px 24px;
                max-width: 1200px;
                margin: 0 auto;
                width: 100%;
            }
            
            .button-bar button {
                padding: 10px 20px;
                font-size: 1.1rem;
                min-width: 120px;
            }
            
            .content-area {
                padding: 24px;
                max-width: 1200px;
                margin: 0 auto;
                width: 100%;
            }
            
            .content-area h2 {
                
                margin-bottom: 20px;
            }
            
            .content-area p {
                
                line-height: 1.6;
            }
            
            .status-bar {
                padding: 12px 24px;
                max-width: 1200px;
                margin: 0 auto;
                width: 100%;
            }
            
            .status-item {
                font-size: 0.9rem;
                margin-right: 24px;
            }
        }
        
        /* Portrait vs Landscape Orientation */
        @media (max-height: 500px) and (orientation: landscape) {
            .button-bar {
                padding: 6px;
            }
            
            .button-bar button {
                padding: 4px 10px;
                font-size: 0.85rem;
            }
            
            .status-bar {
                padding: 6px;
            }
            
            .status-item {
                font-size: 0.7rem;
            }
        }
    </style>
</head>
<body>
    <!-- Top button bar -->
    <div class="button-bar" id="audio-container">
        <div> <span id=podtitle2></span></div>
            <div>
        <audio id="audio" controls>
            <source src="{{mp3file}}" type="audio/mpeg">
            Your browser does not support the audio element.
        </audio>
        <div>
     <button id="back">⬆️</button>  .............  <span id="timeDisplay">0:00 / 0:00</span> ............. <button id="top">⏫</button>
     <p></p>
    
            <input type="range" id="seekSlider" min="0" value="0" step="0.1" disabled>
         </div>
        </div>
             <div>


            <button id="next">⏭️</button>
            <button id="rewind">⏪ -5s</button>
            <button id="playpause">▶</button>
            <button id="finished">✅</button>
            <button id="increase-font">A↑</button>
            <button id="decrease-font">A↓</button>
            </div>
  
    </div>

   
    
    <!-- Middle scrolling text area -->
    <div class="content-area" id="transcription">
  
    </div>
    
    <!-- Bottom status display -->
    <div class="status-bar">
          


                    <span id=podtitle1></span> [{{source}}] 
        <div class="status-item">
            {{#if info.published}}
            <span>Published: {{info.published}}</span>
            {{/if}}
        </div>

    </div>

    <script>
     
 const FONTMAX = 40;
        const FONTMIN = 12;


        window.onload = function () {
            window.scrollTo(0, 0);
            localStorage.setItem("lastPage", window.location.href);

        };

        function adjustPadding() {
            const audioContainer = document.getElementById("audio-container");
            const transcriptionContainer = document.getElementById("transcription");

            // Get the exact height of the fixed controls
            const audioHeight = audioContainer.offsetHeight;

            // Apply dynamic padding
            transcriptionContainer.style.paddingTop = `${audioHeight + 20}px`; // Add extra spacing for safety
        }

        // Adjust on load and resize
        window.addEventListener("load", adjustPadding);
        window.addEventListener("resize", adjustPadding);
        document.addEventListener("DOMContentLoaded", () => {


            let timeLastOpened = new Date()
            let finished = {{ meta.finished }}
        
    let pptoggle = true
    let lastTime = 0
    const listenSecondsUpdateInterval = 10; // seconds

    const decodedTitle = decodeURIComponent("{{{mp3file}}}")
        document.getElementById("podtitle1").textContent = decodedTitle
        document.getElementById("podtitle2").textContent = decodedTitle
        document.title = decodedTitle

        const audio = document.getElementById("audio");
        audio.controls = false
        let seekSlider = document.getElementById("seekSlider");
        const transcriptionContainer = document.getElementById("transcription");
        const nextBtn = document.getElementById("next");
        const backBtn = document.getElementById("back");
        const topBtn = document.getElementById("top");
        const playpauseBtn = document.getElementById("playpause");
        // const pauseBtn = document.getElementById("pause");
        const rewindBtn = document.getElementById("rewind");
        const increaseFontBtn = document.getElementById("increase-font");
        const decreaseFontBtn = document.getElementById("decrease-font");
        const finishBtn = document.getElementById("finished");
        const timeDisplay = document.getElementById("timeDisplay")
      
       let storedFontSize = localStorage.getItem("fontSize");
       let parsedSize = parseInt(storedFontSize, 10);

       if (!isNaN(parsedSize) && parsedSize >= FONTMIN && parsedSize <= FONTMAX) {
           fontSize = parsedSize;
       } else {
           fontSize = 30; // Default value
       }
    
        setFontSize()

        const whisperData = {{{ transcript }}}    

        function isIphone() {
            return /iPhone/i.test(navigator.userAgent);
        }   

      

        function setFontSize() {
            if (fontSize < FONTMIN) {
                fontSize = FONTMIN
            } else if (fontSize > FONTMAX) {
                fontSize = FONTMAX
            }
             transcriptionContainer.style.fontSize = `${fontSize}px`;
             localStorage.setItem("fontSize", fontSize)
        }

        // Process the data into paragraphs and phrases
        function renderTranscription(data) {
            const paragraph = document.createElement("p");

            data.forEach(segment => {

                const span = document.createElement("span");
                span.classList.add("phrase");
                span.dataset.start = segment.start;
                span.dataset.end = segment.end;
                span.textContent = segment.text;

                span.addEventListener("click", () => {
                    const startTime = parseFloat(span.dataset.start);
                    audio.currentTime = startTime; // Jump to the segments's start time
                    // audio.play(); // Resume playback
                    span.scrollIntoView({ behavior: "smooth", block: "center" })
                })

                paragraph.appendChild(span);
            });


            transcriptionContainer.appendChild(paragraph);
        }

        // Render the Whisper data
        renderTranscription(whisperData);

        // Highlight current phrase based on audio time
        const phrases = document.querySelectorAll(".phrase");
        let currentPhraseIndex = -1;

        function highlightCurrentPhrase() {
            const currentTime = audio.currentTime;

            for (let i = 0; i < phrases.length; i++) {
                const start = parseFloat(phrases[i].dataset.start);
                const end = parseFloat(phrases[i].dataset.end);

                if (currentTime >= start && currentTime < end) {
                    if (currentPhraseIndex !== i) {
                        // Remove previous highlight
                        if (currentPhraseIndex !== -1) {
                            phrases[currentPhraseIndex].classList.remove("highlight");
                        }

                        // Highlight new phrase
                        phrases[i].classList.add("highlight");
                        phrases[i].scrollIntoView({ behavior: "smooth", block: "center" });

                        currentPhraseIndex = i;
                    }
                    return;
                }
            }

            // Remove highlight if no phrase matches
            if (currentPhraseIndex !== -1) {
                phrases[currentPhraseIndex].classList.remove("highlight");
                currentPhraseIndex = -1;
            }
        }

        function onDisplayChange() {
            currentPhraseIndex = -1; // Force re-evaluation and scroll
            highlightCurrentPhrase();
        }

        // Attach the timeupdate event listener
        audio.addEventListener("timeupdate", function () {
            updateTimeDisplay();
            highlightCurrentPhrase();

        })

        // Update highlight when the page becomes visible
        document.addEventListener("visibilitychange", () => {
            if (document.visibilityState === "visible") {
                onDisplayChange();
            }
        });

        // Update highlight on resize or orientation change
        window.addEventListener("resize", onDisplayChange);
        window.addEventListener("orientationchange", onDisplayChange);

        // More robust handling for mobile, especially iOS
        window.addEventListener("pageshow", onDisplayChange);

        // Audio control buttons
        function setStartTime() {
            audio.currentTime = {{ startTime }};
            seekSlider.max = audio.duration;
            seekSlider.disabled = false;
        }

        seekSlider.addEventListener("input", function () {
            audio.currentTime = seekSlider.value;
            // updateHighlight();
        });

        audio.addEventListener("pause", () => {
            playpauseBtn.innerHTML = "▶"
            pptoggle = true

        })


        audio.addEventListener("ended", () => {
            playpauseBtn.innerHTML = "▶"
            pptoggle = true

        })
        
        audio.addEventListener("play", () => {
            playpauseBtn.innerHTML = "⏸"
            pptoggle = false
        })



      
  function logMessage(message) {
    console.log(message);
    transcriptionContainer.insertAdjacentHTML("afterbegin", `<p>${message}</p>`);
}
audio.addEventListener("progress", () => {
    if (audio.buffered.length > 0) {
        const end = audio.buffered.end(0);
        if (end >= audio.duration) {
    
                playpauseBtn.style.backgroundColor = "green";
            // alert("MP3 has fully downloaded.");
        }
    }
});


        audio.addEventListener("canplaythrough", setStartTime)

        nextBtn.addEventListener("click", () => {
            saveMeta(true)
        })

        function formatTime(seconds) {
            let min = Math.floor(seconds / 60);
            let sec = Math.floor(seconds % 60);
            return `${min}:${sec.toString().padStart(2, "0")}`;
        }
        function updateTimeDisplay() {
            let current = formatTime(audio.currentTime);
            let total = formatTime(audio.duration);
            seekSlider.value = audio.currentTime;
            timeDisplay.textContent = `${current} / ${total}`;
        }

        playpauseBtn.addEventListener("click", () => {
            if (pptoggle) {
                audio.play();
                playpauseBtn.innerHTML = "⏸"
            } else {
                saveMeta();
                playpauseBtn.innerHTML = "▶"
                audio.pause()
            }
            pptoggle = !pptoggle;
        });

        finishBtn.addEventListener("click", () => {
            finished = true
            saveMeta(true)
        })


        backBtn.addEventListener("click", () => {
            saveMeta()
            localStorage.setItem("lastPage", "")
            window.location.href = "/pod/{{pod}}"
        });
        topBtn.addEventListener("click", () => {
            saveMeta()
            localStorage.setItem("lastPage", "")
            window.location.href = "/"
        });

        rewindBtn.addEventListener("click", () => {
            audio.currentTime = Math.max(0, audio.currentTime - 5);
        });
        // Font size controls
        increaseFontBtn.addEventListener("click", () => {
        
            fontSize += 2;
             setFontSize()
      
        });

        decreaseFontBtn.addEventListener("click", () => {
          
                fontSize -= 2;
                setFontSize()
            
        });

        window.onbeforeunload = function () {
            saveMeta()
        }

        setInterval(() => {
            if (! (audio.paused))
                saveMeta()
        }, 15000);

        function saveMeta(andNext = false) {
            let meta = { finished, timeLastOpened, timeInPod: audio.currentTime }
            fetch("/update-meta-ep", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ name: "{{mp3file}}", ...meta })
            })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        alert(`Error: ${data.message}`);
                    } else {
                        console.log(`Updated meta for ${name}`);
                    }
                    if (andNext) {
                        {{#if nextep}}  
                        window.location.href = "/play/{{pod}}/{{{nextep}}}"
                        {{else}}
                        window.location.href = "/pod/{{pod}}"
                        {{/if}}
                    }
                })
                .catch(error => console.error("Fetch error:", error));

        }

        function audioChanged() 
        {
            const currentTime = audio.currentTime;
            // store currentTime in persistent variable

            // Check if the audio has changed
            if (currentTime !== lastTime) {
                lastTime = currentTime; // Update the last time
                return true; // Audio has changed
            }
            return false; // Audio is not playing
        }

    // Function to call the update-time endpoint
    function addListeningTime() {
        const date = new Date().toISOString().split('T')[0]; // Get the current date in YYYY-MM-DD format
        const podcastName = "{{pod}}"; // Use the current podcast name
        const episodeName = "{{mp3file}}"; // Use the current episode name
        
        fetch(`/update-time?date=${date}&podcastName=${encodeURIComponent(podcastName)}&episodeName=${encodeURIComponent(episodeName)}&seconds=${listenSecondsUpdateInterval}`)
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    console.error(`Error updating time: ${data.message}`);
                } else {
                    console.log(`Time updated successfully for ${podcastName} - ${episodeName}`);
                }
            })
            .catch(error => console.error("Fetch error:", error));
    }

    // Call updateTime every 10 seconds while the audio is playing
    setInterval(() => {
        if (audioChanged()) {
            addListeningTime();
        }
    }, listenSecondsUpdateInterval * 1000); // Convert seconds to milliseconds

});



</script>
</body>
</html>