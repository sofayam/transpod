"""
This type stub file was generated by pyright.
"""

import mlx.core as mx
import mlx.nn as nn
import numpy as np
from dataclasses import dataclass
from typing import Union

@dataclass
class ModelDimensions:
    n_mels: int
    n_audio_ctx: int
    n_audio_state: int
    n_audio_head: int
    n_audio_layer: int
    n_vocab: int
    n_text_ctx: int
    n_text_state: int
    n_text_head: int
    n_text_layer: int
    ...


def sinusoids(length, channels, max_timescale=...): # -> array:
    """Returns sinusoids for positional embedding"""
    ...

class MultiHeadAttention(nn.Module):
    def __init__(self, n_state: int, n_head: int) -> None:
        ...
    
    def __call__(self, x, xa=..., mask=..., kv_cache=...): # -> tuple[array, tuple[array | Any, array | Any], Any]:
        ...
    
    def qkv_attention(self, q, k, v, mask=...): # -> tuple[Any, Any]:
        ...
    


class ResidualAttentionBlock(nn.Module):
    def __init__(self, n_state: int, n_head: int, cross_attention: bool = ...) -> None:
        ...
    
    def __call__(self, x, xa=..., mask=..., kv_cache=...): # -> tuple[Any, tuple[tuple[array | Any, array | Any], tuple[array | Any, array | Any] | Any | None], Any | None]:
        ...
    


class AudioEncoder(nn.Module):
    def __init__(self, n_mels: int, n_ctx: int, n_state: int, n_head: int, n_layer: int, dtype: mx.Dtype = ...) -> None:
        ...
    
    def __call__(self, x): # -> array:
        ...
    


class TextDecoder(nn.Module):
    def __init__(self, n_vocab: int, n_ctx: int, n_state: int, n_head: int, n_layer: int, dtype: mx.Dtype = ...) -> None:
        ...
    
    def __call__(self, x, xa, kv_cache=...): # -> tuple[array, list[None] | Any, list[None]]:
        """
        x : mx.array, shape = (batch_size, <= n_ctx)
            the text tokens
        xa : mx.array, shape = (batch_size, n_audio_ctx, n_audio_state)
            the encoded audio features to be attended on
        """
        ...
    


class Whisper(nn.Module):
    def __init__(self, dims: ModelDimensions, dtype: mx.Dtype = ...) -> None:
        ...
    
    def set_alignment_heads(self, dump: Union[bytes, np.ndarray]): # -> None:
        ...
    
    def embed_audio(self, mel): # -> array:
        ...
    
    def logits(self, tokens, audio_features): # -> array:
        ...
    
    def forward_with_cross_qk(self, mel, tokens): # -> tuple[array, list[None]]:
        ...
    
    def __call__(self, mel, tokens): # -> array:
        ...
    
    @property
    def is_multilingual(self): # -> bool:
        ...
    
    @property
    def num_languages(self): # -> int:
        ...
    
    detect_language = ...
    decode = ...


