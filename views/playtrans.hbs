<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Audio Synced Transcription</title>
    <style>

        #audio-container {
            position: fixed; /* Makes the container stick to the top */
            top: 0; /* Position it at the top of the viewport */
            left: 0;
            width: 100%; /* Stretch to the full width of the page */
            background-color: #fff; /* Optional: Add a background color for clarity */
            z-index: 1000; /* Keep it on top of other elements */
            padding: 10px 0; /* Add some padding for better spacing */
            border-bottom: 1px solid #ccc; /* Optional: Add a subtle border */
        }

        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
        }
        .content {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 20px;
            padding-top: 60px; /* Ensure the text doesn't overlap with the fixed player */
        }

        .segment {
            margin-bottom: 20px;
        }

        .highlight {
            color: red;
            background-color: white;
            transition: background-color 0.5s ease; /* Smooth highlight effect */
        }
    </style>
</head>
<body>

  
    <div id="audio-container">
        <span id=podtitle></span><p></p>
    <audio id="audio" controls>
        <source src="{{mp3file}}" type="audio/mpeg">
        Your browser does not support the audio element.
    </audio>
    <input type="range" id="size-slider" min="10" max="100" value="16">
    </div>

    <div class="content" id="transcription">

    </div>

    <script>
document.addEventListener("DOMContentLoaded", () => {

    document.getElementById("podtitle").textContent = decodeURIComponent("{{{mp3file}}}")

    const audio = document.getElementById("audio");
    const transcriptionContainer = document.getElementById("transcription");

    const slider = document.getElementById('size-slider');


    const whisperData = {{{transcript}}}


    slider.addEventListener('input', () => {
      const textSize = slider.value + 'px';
      transcriptionContainer.style.fontSize = textSize;
    });

    transcriptionContainer.style.fontSize = slider.value + 'px';
    
   
    // Process the data into paragraphs and phrases
    function renderTranscription(data) {
        const paragraph = document.createElement("p");

        data.forEach(segment => {
            const phrases = segment.text.split(/(?<=\.)|(?<=\?)|(?<=\!)/g); // Split text by punctuation

            phrases.forEach(phrase => {
                const span = document.createElement("span");
                span.classList.add("phrase");
                span.dataset.start = segment.start;
                span.dataset.end = segment.end;
                span.textContent = phrase.trim() + " ";
                
                span.addEventListener("click", () => {
                    const startTime = parseFloat(span.dataset.start);
                    audio.currentTime = startTime; // Jump to the phrase's start time
                    audio.play(); // Resume playback
                    span.scrollIntoView({behavior: "smooth", block: "center"})
                });
                paragraph.appendChild(span);
            });
        });

        transcriptionContainer.appendChild(paragraph);
    }

    // Render the Whisper data
    renderTranscription(whisperData);

    // Highlight current phrase based on audio time
    const phrases = document.querySelectorAll(".phrase");
    let currentPhraseIndex = -1;

    function highlightCurrentPhrase() {
        const currentTime = audio.currentTime;

        for (let i = 0; i < phrases.length; i++) {
            const start = parseFloat(phrases[i].dataset.start);
            const end = parseFloat(phrases[i].dataset.end);

            if (currentTime >= start && currentTime < end) {
                if (currentPhraseIndex !== i) {
                    // Remove previous highlight
                    if (currentPhraseIndex !== -1) {
                        phrases[currentPhraseIndex].classList.remove("highlight");
                    }

                    // Highlight new phrase
                    phrases[i].classList.add("highlight");
                    phrases[i].scrollIntoView({ behavior: "smooth", block: "center" });

                    currentPhraseIndex = i;
                }
                return;
            }
        }

        // Remove highlight if no phrase matches
        if (currentPhraseIndex !== -1) {
            phrases[currentPhraseIndex].classList.remove("highlight");
            currentPhraseIndex = -1;
        }
    }

    // Attach the timeupdate event listener
    audio.addEventListener("timeupdate", highlightCurrentPhrase);
});
    </script>
</body>
</html>