<!DOCTYPE html>
<html lang="en">
  <head>
    <link rel="manifest" href="/manifest.json">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <link rel="stylesheet" href="/css/common.css">
    <link rel="stylesheet" href="/css/podcasts.css">
  </head>
  <body>
    <h1>Choose a podcast</h1>

    <div class="container">
        <div class="filter-container">
            <label for="language-select">Language:</label>
            <select id="language-select">
                <option value="all" {{#if (eq selectedLanguage "all")}}selected{{/if}}>All</option>
                {{#each languages}}
                <option value="{{this}}" {{#if (eq ../selectedLanguage this)}}selected{{/if}}>{{this}}</option>
                {{/each}}
            </select>
            <select id="coreSetChoice">
                <option value="false" {{#if (eq coresetOnly "false")}}selected{{/if}}>Fire Hose</option>
                <option value="true" {{#if (eq coresetOnly "true")}}selected{{/if}}>Core set only</option>
            </select>
        </div>

        <div class="table">
            {{#each pods}}
            <div class="table-row" style="display: flex; align-items: center; padding: 5px 0; border-bottom: 1px solid #eee;">
                <div class="col" style="padding-left: 5px; padding-right: 10px;">
                    <a href="/pod/{{this.name}}">
                        <img src="/geticon?pod={{this.name}}" alt="{{this.name}} icon" style="width: 40px; height: 40px; border-radius: 8px; object-fit: cover; vertical-align: middle;">
                    </a>
                </div>
                <div class="col folder-name" style="flex-grow: 1;"><a href="/pod/{{this.name}}">{{this.name}}</a></div>
                <div class="col">
                    <select class="order" data-folder="{{this.name}}">
                        <option value="oldest" {{#if (eq this.order "oldest")}}selected{{/if}}>‚è≥‚Üì</option>
                        <option value="latest" {{#if (eq this.order "latest")}}selected{{/if}}>‚åõ‚Üë</option>
                    </select>
                </div>
                <div class="col">
                    <select class="show" data-folder="{{this.name}}">
                        <option value="all" {{#if (eq this.show "all")}}selected{{/if}}>üî¥+‚úÖ</option>
                        <option value="unfinished" {{#if (eq this.show "unfinished")}}selected{{/if}}>üî¥</option>
                    </select>
                </div>
                <div class="col" style="padding-right: 5px;">
                    <select class="coreset" data-folder="{{this.name}}">
                        <option value="false" {{#if (eq this.coreset "false")}}selected{{/if}}>All</option>
                        <option value="true" {{#if (eq this.coreset "true")}}selected{{/if}}>Core</option>
                    </select>
                </div>
            </div>
            {{/each}}
        </div>

</div>
<div class="link-container">
   
    <a href="/recentListen" class="styled-link">Recent listening</a>
    <a href="/recentPublish" class="styled-link">Recently Published</a>
    <a href="/chartFromDB?language=all" class="styled-link">Chart</a>
    <a href="/showGetNew" class="styled-link">Get new podcasts</a>
    <a href="/search" class="styled-link">Search</a>
    <a href="/concordances" class="styled-link">Concordances</a>
     <button id="reset" class="styled-link" type="button">Reset</button>
</div>

<script>
    document.getElementById('language-select').addEventListener('change', function() {
        const selectedLanguage = this.value;
        window.location.href = `/?language=${selectedLanguage}`;
    });

    window.addEventListener("load", function () {
        const lastPage = localStorage.getItem("lastPage");
        if (lastPage) {
            window.location.href = lastPage;
        }
    });
    document.addEventListener("DOMContentLoaded", function () {

        const coreSetChoice = document.getElementById("coreSetChoice");

        coreSetChoice.addEventListener("change", function () {
            const selectedValue = coreSetChoice.value;

            fetch("/update-meta-global", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ coresetOnly: selectedValue })
            })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        alert(`Error: ${data.message}`);
                    } else {
                        console.log(`Core set choice updated to: ${selectedValue}`);
                        location.reload(); // Reload the page to reflect changes
                    }
                })
                .catch(error => console.error("Fetch error:", error));
        });



    document.querySelectorAll(".table select").forEach(select => {
        select.addEventListener("change", function () {
            const name = this.getAttribute("data-folder");

            // Get latest values of both dropdowns
            const order = document.querySelector(`.order[data-folder="${name}"]`).value;
            const show = document.querySelector(`.show[data-folder="${name}"]`).value;
            const coreset = document.querySelector(`.coreset[data-folder="${name}"]`).value;

            fetch("/update-meta-pod", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ name, order, show, coreset })
            })
                .then(response => response.json())
                .then (data => {
                    if (!data.success) {
                        alert(`Error: ${data.message}`);
                    } else {
                        console.log(`Updated meta for ${name}`);
                    }
                })
                .catch(error => console.error("Fetch error:", error));
        });
    });

        document.getElementById("reset").addEventListener("click", function () {
            clearAppCache();
        });

async function clearAppCache() {
  if ('caches' in window) {
    const keys = await caches.keys();
    await Promise.all(keys.map(key => caches.delete(key)));
    
    if (navigator.serviceWorker.controller) {
      const registration = await navigator.serviceWorker.getRegistration();
      if (registration) {
        await registration.unregister();
      }
    }
    
    location.reload();
  }
}

    });
</script>
  </body>
</html>