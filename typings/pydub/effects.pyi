"""
This type stub file was generated by pyright.
"""

import sys
from .utils import register_pydub_effect

if sys.version_info >= (3, 0):
    xrange = range
@register_pydub_effect
def apply_mono_filter_to_each_channel(seg, filter_fn):
    ...

@register_pydub_effect
def normalize(seg, headroom=...):
    """
    headroom is how close to the maximum volume to boost the signal up to (specified in dB)
    """
    ...

@register_pydub_effect
def speedup(seg, playback_speed=..., chunk_size=..., crossfade=...):
    ...

@register_pydub_effect
def strip_silence(seg, silence_len=..., silence_thresh=..., padding=...):
    ...

@register_pydub_effect
def compress_dynamic_range(seg, threshold=..., ratio=..., attack=..., release=...):
    """
    Keyword Arguments:
        
        threshold - default: -20.0
            Threshold in dBFS. default of -20.0 means -20dB relative to the
            maximum possible volume. 0dBFS is the maximum possible value so
            all values for this argument sould be negative.

        ratio - default: 4.0
            Compression ratio. Audio louder than the threshold will be 
            reduced to 1/ratio the volume. A ratio of 4.0 is equivalent to
            a setting of 4:1 in a pro-audio compressor like the Waves C1.
        
        attack - default: 5.0
            Attack in milliseconds. How long it should take for the compressor
            to kick in once the audio has exceeded the threshold.

        release - default: 50.0
            Release in milliseconds. How long it should take for the compressor
            to stop compressing after the audio has falled below the threshold.

    
    For an overview of Dynamic Range Compression, and more detailed explanation
    of the related terminology, see: 

        http://en.wikipedia.org/wiki/Dynamic_range_compression
    """
    ...

@register_pydub_effect
def invert_phase(seg, channels=...):
    """
    channels- specifies which channel (left or right) to reverse the phase of.
    Note that mono AudioSegments will become stereo.
    """
    ...

@register_pydub_effect
def low_pass_filter(seg, cutoff):
    """
        cutoff - Frequency (in Hz) where higher frequency signal will begin to
            be reduced by 6dB per octave (doubling in frequency) above this point
    """
    ...

@register_pydub_effect
def high_pass_filter(seg, cutoff):
    """
        cutoff - Frequency (in Hz) where lower frequency signal will begin to
            be reduced by 6dB per octave (doubling in frequency) below this point
    """
    ...

@register_pydub_effect
def pan(seg, pan_amount):
    """
    pan_amount should be between -1.0 (100% left) and +1.0 (100% right)
    
    When pan_amount == 0.0 the left/right balance is not changed.
    
    Panning does not alter the *perceived* loundness, but since loudness
    is decreasing on one side, the other side needs to get louder to
    compensate. When panned hard left, the left channel will be 3dB louder.
    """
    ...

@register_pydub_effect
def apply_gain_stereo(seg, left_gain=..., right_gain=...):
    """
    left_gain - amount of gain to apply to the left channel (in dB)
    right_gain - amount of gain to apply to the right channel (in dB)
    
    note: mono audio segments will be converted to stereo
    """
    ...

