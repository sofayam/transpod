"""
This type stub file was generated by pyright.
"""

from typing import Callable, List, Optional, TextIO

def format_timestamp(seconds: float, always_include_hours: bool = ..., decimal_marker: str = ...): # -> str:
    ...

def get_start(segments: List[dict]) -> Optional[float]:
    ...

class ResultWriter:
    extension: str
    def __init__(self, output_dir: str) -> None:
        ...
    
    def __call__(self, result: dict, output_name: str, options: Optional[dict] = ..., **kwargs): # -> None:
        ...
    
    def write_result(self, result: dict, file: TextIO, options: Optional[dict] = ..., **kwargs):
        ...
    


class WriteTXT(ResultWriter):
    extension: str = ...
    def write_result(self, result: dict, file: TextIO, options: Optional[dict] = ..., **kwargs): # -> None:
        ...
    


class SubtitlesWriter(ResultWriter):
    always_include_hours: bool
    decimal_marker: str
    def iterate_result(self, result: dict, options: Optional[dict] = ..., *, max_line_width: Optional[int] = ..., max_line_count: Optional[int] = ..., highlight_words: bool = ..., max_words_per_line: Optional[int] = ...): # -> Generator[tuple[str, str, LiteralString] | tuple[str, str, str] | tuple[str, str, Any], Any, None]:
        ...
    
    def format_timestamp(self, seconds: float): # -> str:
        ...
    


class WriteVTT(SubtitlesWriter):
    extension: str = ...
    always_include_hours: bool = ...
    decimal_marker: str = ...
    def write_result(self, result: dict, file: TextIO, options: Optional[dict] = ..., **kwargs): # -> None:
        ...
    


class WriteSRT(SubtitlesWriter):
    extension: str = ...
    always_include_hours: bool = ...
    decimal_marker: str = ...
    def write_result(self, result: dict, file: TextIO, options: Optional[dict] = ..., **kwargs): # -> None:
        ...
    


class WriteTSV(ResultWriter):
    """
    Write a transcript to a file in TSV (tab-separated values) format containing lines like:
    <start time in integer milliseconds>\t<end time in integer milliseconds>\t<transcript text>

    Using integer milliseconds as start and end times means there's no chance of interference from
    an environment setting a language encoding that causes the decimal in a floating point number
    to appear as a comma; also is faster and more efficient to parse & store, e.g., in C++.
    """
    extension: str = ...
    def write_result(self, result: dict, file: TextIO, options: Optional[dict] = ..., **kwargs): # -> None:
        ...
    


class WriteJSON(ResultWriter):
    extension: str = ...
    def write_result(self, result: dict, file: TextIO, options: Optional[dict] = ..., **kwargs): # -> None:
        ...
    


def get_writer(output_format: str, output_dir: str) -> Callable[[dict, TextIO, dict], None]:
    ...

